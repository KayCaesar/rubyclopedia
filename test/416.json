{"id":475,"url":"http://railscasts.com/episodes/416-form-objects.json","name":"Form Objects","position":416,"permalink":"form-objects","description":"Models have a tendency to become a complex mess as an application grows. In this episode you will learn a couple of techniques to extract form-behavior out into its own class.","notes":"**Resources**\r\n\r\n* [7 Refactoring Patterns for Models](http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/)\r\n* [Virtus](https://github.com/solnic/virtus)\r\n* [Reform](https://github.com/apotonick/reform)\r\n* [Episode 398: Service Objects](http://railscasts.com/episodes/398-service-objects)\r\n* [Episode 371: Strong Parameters](http://railscasts.com/episodes/371-strong-parameters)\r\n\r\n```app/forms/password_form.rb\r\nclass PasswordForm\r\n  # Rails 4: include ActiveModel::Model\r\n  extend ActiveModel::Naming\r\n  include ActiveModel::Conversion\r\n  include ActiveModel::Validations\r\n\r\n  def persisted?\r\n    false\r\n  end\r\n\r\n  attr_accessor :original_password, :new_password\r\n\r\n  validate :verify_original_password\r\n  validates_presence_of :original_password, :new_password\r\n  validates_confirmation_of :new_password\r\n  validates_length_of :new_password, minimum: 6\r\n\r\n  def initialize(user)\r\n    @user = user\r\n  end\r\n  \r\n  def submit(params)\r\n    self.original_password = params[:original_password]\r\n    self.new_password = params[:new_password]\r\n    self.new_password_confirmation = params[:new_password_confirmation]\r\n    if valid?\r\n      @user.password = new_password\r\n      @user.save!\r\n      true\r\n    else\r\n      false\r\n    end\r\n  end\r\n\r\n  def verify_original_password\r\n    unless @user.authenticate(original_password)\r\n      errors.add :original_password, \"is not correct\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n```app/forms/signup_form.rb\r\nclass SignupForm\r\n  # Rails 4: include ActiveModel::Model\r\n  extend ActiveModel::Naming\r\n  include ActiveModel::Conversion\r\n  include ActiveModel::Validations\r\n\r\n  def persisted?\r\n    false\r\n  end\r\n  \r\n  def self.model_name\r\n    ActiveModel::Name.new(self, nil, \"User\")\r\n  end\r\n\r\n  validates_presence_of :username\r\n  validate :verify_unique_username\r\n  validates_format_of :email, with: /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\Z/\r\n  validates_length_of :password, minimum: 6\r\n  \r\n  delegate :username, :email, :password, :password_confirmation, to: :user\r\n  delegate :twitter_name, :github_name, :bio, to: :profile\r\n  \r\n  def user\r\n    @user ||= User.new\r\n  end\r\n  \r\n  def profile\r\n    @profile ||= user.build_profile\r\n  end\r\n  \r\n  def submit(params)\r\n    user.attributes = params.slice(:username, :email, :password, :password_confirmation)\r\n    profile.attributes = params.slice(:twitter_name, :github_name, :bio)\r\n    self.subscribed = params[:subscribed]\r\n    if valid?\r\n      generate_token\r\n      user.save!\r\n      profile.save!\r\n      true\r\n    else\r\n      false\r\n    end\r\n  end\r\n\r\n  def subscribed\r\n    user.subscribed_at\r\n  end\r\n\r\n  def subscribed=(checkbox)\r\n    user.subscribed_at = Time.zone.now if checkbox == \"1\"\r\n  end\r\n\r\n  def generate_token\r\n    begin\r\n      user.token = SecureRandom.hex\r\n    end while User.exists?(token: user.token)\r\n  end\r\n\r\n  def verify_unique_username\r\n    if User.exists? username: username\r\n      errors.add :username, \"has already been taken\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n```users_controller.rb\r\ndef new\r\n  @signup_form = SignupForm.new\r\nend\r\n\r\ndef create\r\n  @signup_form = SignupForm.new\r\n  if @signup_form.submit(params[:user])\r\n    session[:user_id] = @signup_form.user.id\r\n    redirect_to @signup_form.user, notice: \"Thank you for signing up!\"\r\n  else\r\n    render \"new\"\r\n  end\r\nend\r\n```\r\n\r\n```users/new.html.erb\r\n<%= form_for @signup_form do |f| %>\r\n```\r\n\r\n```passwords_controller.rb\r\ndef new\r\n  @password_form = PasswordForm.new(current_user)\r\nend\r\n\r\ndef create\r\n  @password_form = PasswordForm.new(current_user)\r\n  if @password_form.submit(params[:password_form])\r\n    redirect_to current_user, notice: \"Successfully changed password.\"\r\n  else\r\n    render \"new\"\r\n  end\r\nend\r\n```\r\n\r\n```passwords/new.html.erb\r\n<%= form_for @password_form, url: passwords_path, method: :post do |f| %>\r\n```\r\n","published_at":"2013-06-03T00:00:00-07:00","comments_count":36,"duration":"18:56","file_sizes":{"zip":"71040","mp4":"47164746","m4v":"26844702","webm":"31059859","ogv":"62561586"},"pro":true,"revised":false,"custom_asset_domain":"","tags":[{"tag":{"created_at":"2008-07-25T22:22:34-07:00","id":6,"name":"refactoring","updated_at":"2008-07-25T22:22:34-07:00"}},{"tag":{"created_at":"2008-07-25T22:22:34-07:00","id":15,"name":"forms","updated_at":"2008-07-25T22:22:34-07:00"}}]}